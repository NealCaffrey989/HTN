(defdomain Raise_Resource
 (
 ;;-----------------------------axiom----------------------------------------
  (:- (same ?x ?x) nil)
  (:- (different ?x ?y) ((not (same ?x ?y))))
 ;;-----------------------------operator----------------------------------------
 ;;---------------------------------转移司机----------------------------------------
 (:operator (!Driver-move ?t ?track ?n ?loc-from ?loc-to)
    ;;前提条件
     (
      (StartTime ?t1)(End-Time ?track ?t2)(Duration ?t3);;模板前提-时间
      (Cost-Resource Res-money ?nm)
      (assign ?tmv 1)(assign ?m (call * ?n 100))
      ;;-----自定义前提------
      (loc-at-driver ?loc-from ?nlf)(call >= ?nlf ?n)
      (loc-at-driver ?loc-to ?nlt)
      (assign ?dt 1)
     )
    ;;删除状态
     (
      (StartTime ?t1)(End-Time ?track ?t2)(Duration ?t3);;删除历史时间状态
      (Cost-Resource Res-money ?nm)
      (loc-at-driver ?loc-to ?nlt)(loc-at-driver ?loc-from ?nlf)
     )
    ;;添加状态
     (
      (StartTime ?t)(End-Time ?track (call + ?t2 ?dt))(Duration ?tmv);;时间状态添加
      (Cost-Resource Res-money (call + ?nm ?m))
      (loc-at-driver ?loc-from (call - ?nlf ?n))(loc-at-driver ?loc-to (call + ?nlt ?n))
     )
    ;;消耗（忽略）
   )
   
   
   
   ;;---------------------------------货车操作------------------------------------
  (:operator (!track-move ?t ?track ?loc-from ?loc-to ?dn)
    ;;前提条件
     ((StartTime ?t1)(End-Time ?track ?t2)(Duration ?t3);;模板前提-时间
      (Cost-Resource Res-money ?n);;模板前提-资源储量
      
      ;;-----自定义前提------
      (loc-at ?track ?loc-from)
      (distance-between ?loc-from ?loc-to ?distance);;环境状态
      (speed-of ?track ?speed)(track-mile-spend Res-money ?track ?n2);;行动能力与消耗能力
      (loc-at-driver ?loc-from ?nl)
      (call >= ?nl ?dn)(loc-at-driver ?loc-to ?nlt)
      (assign ?tmv (call / ?distance ?speed))(assign ?sg (call * ?n2 ?distance)) ;;时间与资源计算
     )
    ;;删除状态
     ((StartTime ?t1)(End-Time ?track ?t2)(Duration ?t3);;删除历史时间状态
     (Cost-Resource Res-money ?n);;删除历史资源状态
     (loc-at ?track ?loc-from);;删除环境状态
     (loc-at-driver ?loc-from ?nl)
     (loc-at-driver ?loc-to ?nlt)
     )
    ;;添加状态
     ((StartTime ?t)(End-Time ?track (call + ?t ?tmv))(Duration ?tmv);;时间状态添加
      (Cost-Resource Res-money (call + ?n ?sg));;资源状态添加
      (loc-at ?track ?loc-to)
      (:protection(loc-at ?track ?loc-to));;环境状态改变
      (loc-at-driver ?loc-from (call - ?nl ?dn))
      (loc-at-driver ?loc-to (call + ?nlt ?dn))
     )
    ;;消耗（忽略）
   )

  (:operator (!track-load-stone ?t ?track ?loc-from)
    ;;前提条件
     ((StartTime ?t1)(End-Time ?track ?t2)(Duration ?t3);;模板前提-时间
      
      ;;-----自定义前提------
      (stone-at-of ?loc-from ?n)(carry-ability ?track ?ability)
      (carry-of ?track ?n1)(loc-at ?track ?loc-from)
      (assign ?tmv 0.2)(assign ?amount (call min ?n ?ability)) ;;时间与资源计算
     )
    ;;删除状态
     ((StartTime ?t1)(End-Time ?track ?t2)(Duration ?t3);;删除历史时间状态
      (carry-of ?track ?n1)(stone-at-of ?loc-from ?n)(carry-ability ?track ?ability)
      (:protection(loc-at ?track ?loc-from))
     )
    ;;添加状态
     ((StartTime ?t)(End-Time ?track (call + ?t ?tmv))(Duration ?tmv);;时间状态添加
      (carry-of ?track (call + ?n1 ?amount))(stone-at-of ?loc-from (call - ?n ?amount))
      (carry-ability ?track (call - ?ability ?amount))      
     )
    ;;消耗（忽略）
   )
   
   (:operator (!track-unload-stone ?t ?track ?loc-to)
    ;;前提条件
     ((StartTime ?t1)(End-Time ?track ?t2)(Duration ?t3);;模板前提-时间
      
      ;;-----自定义前提------
      (stone-need-of ?loc-to ?n)(carry-ability ?track ?ability)
      (carry-of ?track ?n1)(loc-at ?track ?loc-to)
      (assign ?tmv 0.2)(assign ?amount (call min ?n ?n1)) ;;时间与资源计算
     )
    ;;删除状态
     ((StartTime ?t1)(End-Time ?track ?t2)(Duration ?t3);;删除历史时间状态
      (carry-of ?track ?n1)(stone-need-of ?loc-to ?n)(carry-ability ?track ?ability)
      (:protection(loc-at ?track ?loc-to))
     )
    ;;添加状态
     ((StartTime ?t)(End-Time ?track (call + ?t ?tmv))(Duration ?tmv);;时间状态添加
      (carry-of ?track (call - ?n1 ?amount))(stone-need-of ?loc-to (call - ?n ?amount))
      (carry-ability ?track (call + ?ability ?amount))      
     )
    ;;消耗（忽略）
   )
   ;;------------------------------运输队操作-----------------------------------------
  (:operator (!team-load-stone ?t ?team ?loc-from)
    ;;前提条件
     ((StartTime ?t1)(End-Time ?team ?t2)(Duration ?t3);;模板前提-时间
      
      ;;-----自定义前提------
      (stone-at-of ?loc-from ?n)(carry-ability ?team ?ability)
      (carry-of ?team ?n1)(loc-at ?team ?loc-from)
      (assign ?tmv 0.2)(assign ?amount (call min ?n ?ability)) ;;时间与资源计算
     )
    ;;删除状态
     ((StartTime ?t1)(End-Time ?team ?t2)(Duration ?t3);;删除历史时间状态
      (carry-of ?team ?n1)(stone-at-of ?loc-from ?n)(carry-ability ?team ?ability)
      (:protection(loc-at ?team ?loc-from))
     )
    ;;添加状态
     ((StartTime ?t)(End-Time ?team (call + ?t ?tmv))(Duration ?tmv);;时间状态添加
      (carry-of ?team (call + ?n1 ?amount))(stone-at-of ?loc-from (call - ?n ?amount))
      (carry-ability ?team (call - ?ability ?amount))      
     )
    ;;消耗（忽略）
   )
   
    (:operator (!team-move ?t ?team ?loc-from ?loc-to)
    ;;前提条件
     ((StartTime ?t1)(End-Time ?team ?t2)(Duration ?t3);;模板前提-时间
      (Cost-Resource Res-money ?n);;模板前提-资源储量
      
      ;;-----自定义前提------
      (loc-at ?team ?loc-from)
      (distance-between ?loc-from ?loc-to ?distance);;环境状态
      (speed-of ?team ?speed)(team-mile-spend Res-money ?team ?n2);;行动能力与消耗能力
      (assign ?tmv (call / ?distance ?speed))(assign ?sg (call * ?n2 ?distance)) ;;时间与资源计算
     )
    ;;删除状态
     ((StartTime ?t1)(End-Time ?team ?t2)(Duration ?t3);;删除历史时间状态
     (Cost-Resource Res-money ?n);;删除历史资源状态
     (loc-at ?team ?loc-from);;删除环境状态

     )
    ;;添加状态
     ((StartTime ?t)(End-Time ?team (call + ?t ?tmv))(Duration ?tmv);;时间状态添加
      (Cost-Resource Res-money (call + ?n ?sg));;资源状态添加
      (loc-at ?team ?loc-to);;环境状态改变
      (:protection(loc-at ?team ?loc-to))
     )
    ;;消耗（忽略）
   )
   
   (:operator (!team-unload-stone ?t ?team ?loc-to)
    ;;前提条件
     ((StartTime ?t1)(End-Time ?team ?t2)(Duration ?t3);;模板前提-时间
      
      ;;-----自定义前提------
      (stone-need-of ?loc-to ?n)(carry-ability ?team ?ability)
      (carry-of ?team ?n1)(loc-at ?team ?loc-to)
      (assign ?tmv 0.2)(assign ?amount (call min ?n ?n1)) ;;时间与资源计算
     )
    ;;删除状态
     ((StartTime ?t1)(End-Time ?team ?t2)(Duration ?t3);;删除历史时间状态
      (carry-of ?team ?n1)(stone-need-of ?loc-to ?n)(carry-ability ?team ?ability)
      (:protection(loc-at ?team ?loc-to))
     )
    ;;添加状态
     ((StartTime ?t)(End-Time ?team (call + ?t ?tmv))(Duration ?tmv);;时间状态添加
      (carry-of ?team (call - ?n1 ?amount))(stone-need-of ?loc-to (call - ?n ?amount))
      (carry-ability ?team (call + ?ability ?amount))      
     )
    ;;消耗（忽略）
   )
   
   ;;--------------------------------------单位任务完成操作-------------------------------------------
  (:operator(!!save-method ?o ?t)
  ;;前提条件
  ((End-Time ?o ?t1))
  ;;删除状态
  ((End-Time ?o ?t1))
  ;;添加状态
  ((End-Time ?o ?t))
  ;;消耗（忽略）
  )
  
  (:operator(!!is-nottrack)
  ;;前提条件
  ((istrack true))
  ;;删除状态
  ((istrack true))
  ;;添加状态
  ((istrack false))
  ;;消耗（忽略）
  )
  
   
  ;;------通用操作------
  (:operator(!!return-back)
  ;;前提条件
  ()
  ;;删除状态
  ()
  ;;添加状态
  ()
  ;;消耗（忽略）
  )
 ;;-----------------------------method------------------------------------------
 (:method (raise-stone ?t ?dn)
             (       
              (istrack true)       
              (stone-need-of ?loc-to ?nt)(call > ?nt 0)
              (stone-at-of ?loc-from ?nf)(call > ?nf 0)
            )
             (
              (raise-stone-bytrack ?t ?loc-from ?loc-to ?dn)
              ;;(raise-stone-byteam ?t ?loc-from ?loc-to)
              (raise-stone ?t ?dn)
             )
             
             (
              (istrack false)
              (stone-need-of ?loc-to ?nt)(call > ?nt 0)
              (stone-at-of ?loc-from ?nf)(call > ?nf 0)
             )
             (
              (raise-stone-byteam ?t ?loc-from ?loc-to)
              (raise-stone ?t ?dn)
             )
             (
              or 
              (not((stone-need-of ?loc-to ?nt)(call > ?nt 0)))
              (not((stone-at-of ?loc-from ?nf)(call > ?nf 0)))
             )
             ((!!return-back))
 )
  (:method (raise-stone-bytrack ?t ?loc-from ?loc-to ?dn)
             (
              (loc-at ?track ?loc-from)(track-mile-spend Res-money ?track ?s)
             )
             (
               (track-stone ?t ?track ?loc-from ?loc-to ?dn)
             )
             
             (
              (loc-at ?track ?loc-to1)
              (track-mile-spend Res-money ?track ?s)
              (End-Time ?track ?t2)
              (stone-need-of ?loc-to1 ?nt)
             )
             (
              (!track-move ?t2 ?track ?loc-to1 ?loc-from ?dn)
              (track-stone ?t ?track ?loc-from ?loc-to ?dn)
             )
             
             (
              (loc-at ?track ?loc-from1)(track-mile-spend Res-money ?track ?s)(End-Time ?track ?t2)
              (not(same ?loc-from1 ?loc-from))(stone-at-of ?loc-from1 0)
             )
             (
              (!track-move ?t2 ?track ?loc-from1 ?loc-from ?dn)
              (track-stone ?t ?track ?loc-from ?loc-to ?dn)
              ;;(!!return-back)
             )
             
 )
 
   (:method (raise-stone-byteam ?t ?loc-from ?loc-to)
             (
              (loc-at ?team ?loc-from)(team-mile-spend Res-money ?team ?s)
             )
             (
               (team-stone ?t ?team ?loc-from ?loc-to)
             )
             
             (
              (loc-at ?team ?loc-to1)
              (team-mile-spend Res-money ?team ?s)
              (End-Time ?team ?t2)
              (stone-need-of ?loc-to1 ?nt)
             )
             (
              (!team-move ?t2 ?team ?loc-to1 ?loc-from)
              (team-stone ?t ?team ?loc-from ?loc-to)
             )
             
             (
              (loc-at ?team ?loc-from1)(team-mile-spend Res-money ?team ?s)(End-Time ?team ?t2)
              (not(same ?loc-from1 ?loc-from))(stone-at-of ?loc-from1 0)
             )
             (
              (!team-move ?t2 ?track ?loc-from1 ?loc-from)
              (team-stone ?t ?team ?loc-from ?loc-to)
              ;;(!!return-back)
             )
             
 )
 
 
  (:method (track-stone ?t ?track ?loc-from ?loc-to ?dn)
             (
              (loc-at-driver ?loc-from ?nf)(call >= ?nf ?dn)
             )
             (
              (track-stone-ok ?t ?track ?loc-from ?loc-to ?dn)
             )
             (
              (loc-at-driver ?loc-from ?nf)(call < ?nf ?dn)
              (assign ?nn (call - ?dn ?nf))
             )
             (
               (driver-move ?t ?loc-from ?nn)
               (track-stone ?t ?track ?loc-from ?loc-to ?dn)
             )
  )
  
  (:method (team-stone ?t ?team ?loc-from ?loc-to)
             (
               (End-Time ?team ?t1)(assign ?d (call - ?t ?t1))
               (distance-between ?loc-from ?loc-to ?distance);;环境状态
               (speed-of ?team ?speed)
               (assign ?td (call + (call / ?distance ?speed) 0.2 0.2))
               (call >= ?d ?td)
             )
             (
               (!team-load-stone ?t1 ?team ?loc-from)
               (team-stone-move ?t ?team ?loc-from ?loc-to)
             )
  )
  
  (:method (team-stone-move ?t ?team ?loc-from ?loc-to)
             (               
               (End-time ?team ?t2)
             )
             (
               (!team-move ?t2 ?team ?loc-from ?loc-to)
               (team-stone-unload ?t ?team ?loc-from ?loc-to)
             )
   )
  (:method (team-stone-unload ?t ?team ?loc-from ?loc-to)
             (               
               (End-time ?team ?t2)
             )
             (
               (!team-unload-stone ?t2 ?track ?loc-to)
             )
   )
  
  (:method (track-stone-ok ?t ?track ?loc-from ?loc-to ?dn)
             (
               (End-Time ?track ?t1)(assign ?d (call - ?t ?t1))
               (distance-between ?loc-from ?loc-to ?distance);;环境状态
               (speed-of ?track ?speed)
               (assign ?td (call + (call / ?distance ?speed) 0.2 0.2))
               (call >= ?d ?td)
             )
             (
               (!track-load-stone ?t1 ?track ?loc-from)
               (track-stone-move ?t ?track ?loc-from ?loc-to ?dn)
             )
             (
               not((End-Time ?track ?t1)(assign ?d (call - ?t ?t1))
               (distance-between ?loc-from ?loc-to ?distance);;环境状态
               (speed-of ?track ?speed)
               (assign ?td (call + (call / ?distance ?speed) 0.2 0.2))
               (call >= ?d ?td))
              )
              (
               (!!is-nottrack)
              )
  )
  
  
  
  
  (:method (driver-move ?t ?loc-from ?nn)
             (               
               (loc-at ?track ?loc-from)(track-mile-spend Res-money ?track ?s)
               (stone-need-of ?loc-to1 ?nt)(loc-at-driver ?loc-to1 ?n)(call > ?n 0)
               (assign ?nd (call min ?nn ?n))
               (End-Time ?track ?t1)
             )
             (
               (!Driver-move ?t1 ?track ?nd ?loc-to1 ?loc-from)
             )
             (
               (loc-at ?track ?loc-from)(track-mile-spend Res-money ?track ?s)
               (stone-at-of ?loc-from1 ?nt)(loc-at-driver ?loc-from1 ?n)(call > ?n 0)
               (assign ?nd (call min ?nn ?n))
               (not(same ?loc-from1 ?loc-from))
               (End-Time ?track ?t1)
             )
             ((!Driver-move ?t1 ?track ?nd ?loc-from1 ?loc-from))
   )
  
  
   (:method (track-stone-move ?t ?track ?loc-from ?loc-to ?dn)
             (               
               (End-time ?track ?t2)
             )
             (
               (!track-move ?t2 ?track ?loc-from ?loc-to ?dn)
               (track-stone-unload ?t ?track ?loc-from ?loc-to)
             )
   )
  (:method (track-stone-unload ?t ?track ?loc-from ?loc-to)
             (               
               (End-time ?track ?t2)
             )
             (
               (!track-unload-stone ?t2 ?track ?loc-to)
             )
   )
 
 ;;-------------------------------end-------------------------------------------
 )
)